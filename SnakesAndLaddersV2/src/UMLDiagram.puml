@startuml
abstract class Square
abstract class Game
abstract class Main
abstract class Die
abstract class Player
abstract class LastSquareRole
abstract class SnakeRole
abstract class LadderRole
abstract class FirstSquareRole
abstract class Board
abstract class SquareRole
abstract class RegularSquareRole



SquareRole <|-- RegularSquareRole
Game <-- Main
Game <--> Die
Game o--> Player
Player <--> Square
SquareRole <|-- FirstSquareRole
SquareRole <|-- LadderRole
SquareRole <|-- SnakeRole
SquareRole <|-- LastSquareRole
Square <--> SquareRole
Board o-->Square
Game o--> Board
FirstSquareRole o--> Player

class RegularSquareRole{
+ RegularSquareRole ( Square s )
}


class Main{
--
+ main(String[] args)
}

class SquareRole {
--
+ SquareRole ( Square s )
+ boolean isOccupied ()
+ boolean isFirstSquare ()
+ boolean isLastSquare ()
+ Square moveAndLand ( int moves )
+ Square landHereOrGoHome ()
+ void enter ( Player player )
+ void leave ( Player player )
+ boolean isDeath()
}

class Board {
+ Board ( int numSquares , int [][] ladders , int [][] snakes, int[] death)
+ void makeDeath(int[] death)
+ void makeSquares (int numSquares )
+ Square firstSquare ()
+ Square lastSquare ()
+ int numberOfSquares ()
+ void makeSnakes (int [][] snakes )
+ void makeLadders (int [][] ladders )
}



class Square {
- {static} player: Player
- {static} position: int
- {static} game: Game
--
+ getPlayer(): Player
+ isFirstSquare(): boolean
+ isLastSquare(): boolean
+ enter(Player)
+ leave(Player)
+ isOccupied(): boolean
# findRelativeSquare(int): ISquare
+ moveAndLand(int): ISquare
#findFirstSquare(): ISquare
+ landHereOrGoHome(): ISquare
+ getPosition(): int
+ getGame(): Game
+ Square(int, Game)
}

class Die{
--
+ roll(): int
}

class Game{
- {static} winner: Player
--
# createPlayers(String[])
# createGame(int, int[][], int[][])
# numberOfSquares(): int
+ Game(String[], int, int[[], int[])
+ FirstSquare(): ISquare
~ currentPlayer(): Player
# notOver(): boolean
# movePlayer(int)
+ play()
+ findSquare(int): ISquare
+ toString(): String
+ finsLastSquare(): ISquare
}

class Player{
- {static} name: string
--
+ Player(String)
+ moveForward(int)
+ position(): int
+ toString(): String
+ wins(): boolean
}

class FirstSquareRole{
--
+ FirstSquareRole ( Square s )
+ @Override public boolean isFirstSquare ()
+ @Override public void enter ( Player player )
+ @Override public void leave ( Player player )
+ @Override public boolean isOccupied ()
}

class LadderRole{
# transport: int
--
+ Ladder(int, Game, int)
}

class SnakeRole{
# transport: int
--
+ Snake(int, Game, int)
}

class LastSquareRole{
--
+ LastSquare(int, Game)
+ isLastSquare(): boolean
}


@enduml